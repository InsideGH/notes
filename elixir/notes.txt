Elixir
Search for "not possible in javascript"

create 2012
  functional - no obj/classes
  dynamic - type checked at runtime (no need to declare data types)
  compiled - byte code on erland vm (beam) - stable!
  last expression is the return value
  pure functions
    return only from args
    no side effects

general purpose but best
  data processing, consuming, computing and transforming
  networking, webservers
  high avail system, must always be avail, despite crashes.

3 important areas
  functions
  pipe
  pattern matching

functions
  f(x)
  g(f(x), y)

Define a module (and function)
  defmodule Account do
    def balance(initial, spending) do
      initial - spending
    end
  end

current_balance = Account.balance(1000, 200)
IO.puts "Current balance: US $#{current_balance}"

Pure vs OO
  Info hidden vs function receives all data necessary to calc

Pipe
  To solve the issue of having many nested function calls
  Pipe is like javascripts async series
  Pipe is a bit similar to RX streams, but streams do not have function
  arguments in the same sence.
  |>
  The above is the elixir pipe. The right side takes the result as the first arg

  defmodule Account do
    def balance(initial, spending) do
      discount(initial, 10)
      |> interest(0.1)
      |> format($)
    end
  end

  defmodule Account do
    def print_sum do
      1..10
      |> Enum.sum
      |> IO.puts
    end
  end

  Ex1
    IO.puts String.upcase("Elixir") -> "Elixir" |> String.upcase |> IO.puts
  Ex2
    format(String.split(full_name)) ->  full_name |> String.split |> format

  Pattern matching
    To remove if statements

    JS
      let first_name = "Jose ";
      let last_name = "Valim";
      let full_name = first_name + last_name;
      console.log(full_name);

    Elixir
      "Jose " <> last_name = "Jose Valim"
      "Jose " <> last_name = "Valim"

    JS
      a=[1,2,3,4]
      [peter, nisse, pelle, jax, knuda] = a

    Elixir
      data = ["elixir", "valim"]
      [lang, author] = data

    Elixir
      Traditional
        defmodule Account do
          def run_transaction(balance, amount, type) do
  //          if type == :deposit do
  //          else
  //          end
          end
        end
        Account.run_transaction(1000, 50, :deposit)
        Account.run_transaction(1000, 50, :withdrawal)

      instead, write two functions. Pattern matching in function arguments
      makes this possible.

        defmodule Account do
          def run_transaction(balance, amount, :deposit) do
          end
          def run_transaction(balance, amount, :withdrawal) do
          end
        end
        Account.run_transaction(1000, 50, :deposit)
        Account.run_transaction(1000, 50, :withdrawal)

      instead, use pipe (similiar to RX streams, starting with 1000, +50, -30)
        1000
        |> Account.run_transaction(50, :deposit)
        |> Account.run_transaction(30, :withdrawal)

  Functions first class citizens
    Can be assigned to variables
    Passed to arguments

    Anonymous (no name or module)
      max_balance = fn(amount) -> "Max #{amount}" end
      max_balance.(500)
      ---
      deposit = fn(balance, amount) -> balance + amount end
      withdraw = fn(balance, amount) -> balance - amount end

      run_transaction(100,20, deposit);
      run_transaction(100,20, withdraw);
      ---
      multiple clauses (just as with named functions)
        account_transaction = fn
                              (balance, amount, :deposit) -> balance + amount
                              (balance, amount, :withdraw) -> balance - amount
                              end
        account_transaction.(100, 20, :deposit)
        account_transaction.(100, 20, :withdraw)
      ---
      short hand syntax (anonymous functions that adds two arguments passed to it)
        deposit = &(&1 + &2)

        account_transaction.(100, 20, &(&1 + &2))

        javascript : [1,2,3,4].map(value => value * 2)
        elixir : Enum.map([1,2,3,4], &(&1 * 2))


  Examples
    deposit = fn(balance, amount) -> balance + amount end
    withdrawal = fn(balance, amount) -> balance - amount end

    ---

    defmodule Account do
      def run_transaction(balance, amount, transaction ) do
        if amount > 10000 do
          "Cannot perform transaction"
        else
          transaction.(balance, amount)
         end
      end
    end

    ---

    perform_operation = fn
      (values, :addition ) -> Enum.reduce(values, &(&1 + &2))
      (values, :multiplication ) -> Enum.reduce(values, &(&1 * &2))
    end

    IO.puts perform_operation.([1, 2, 3, 4], :addition)
    IO.puts perform_operation.([1, 2, 3, 4], :multiplication)

    ---

  Splitting lists

    javascript:
    [a,b,...c] = [1,2,3,4]
      a = 1
      b = 2
      c = [3, 4]

    elixir
      [head | tail] = [1,2,3,4]
      head = 1
      tail = 2,3,4
      or to ignore tail
        [head | _ ] = [1,2,3,4]

    javascript
      foo = ([a,...b]) => {console.log(a,b);}

    elixir
      defmodule Language do
        def foo(head | tail) do
          IO.puts "head #{head}"
          IO.puts "tail #{tail}"
        end
      end

    NO FOR LOOPS IN ELIXIR! USE RECURSION INSTEAD
      defmodule Language do
        def print_list([head | tail]) do    <----------------recursive case
          IO.puts "head: #{head}"
          print_list(tail)
        end

        def print_list([]) do     <-----------------BASE CASE
        end
      end

      javascript :
      function bar([a, ...rest]) {
        console.log(a);
        if (rest.length > 0)
          bar(rest);
      }

    tuples (first element is often a atom)
      Like javascript object.

      {:ok, "elixir", 2012}
      elem(tuple, 1) i "elixir"

      {status, result} = File.read("something that exists")
      {:ok, result} = File.read("something that exists")
      {:ok, result} = File.read("bogus") // will throw error.

      Not possible in javascript -------------------->
        defmodule Account do
          def parse_file({:ok, content}) do
          end
          def parse_file({:error, _ }) do
          end
        end
        File.read("transaction.csv") |> Account.parse_file()

      Passing options with keyword lists
        When passing optional values to functions
        Account.balance(currency: "dollar", symbol: "$") is same as
        Account.balance([{currency: "dollar"}, {symbol: "$"}])

        def balance(options \\ []) do
          options[:currency] || "dollar"
        end

        in javascript ->
          balance({currency: "dollar". symbol: "$"});
          balance(options = {currency: "dollar"})
          {
            options.currency
            options["currency"]
          }
      Ecto library (javascript sequalize) uses keyword lists
        Repo.all( from u in User,
               where: u.age > 21,
               where: u.is_active == true)

        javascript Sequalize
          Repo.findAll({
            where: {
            authorId: { $gt: 21 },
            status: true
            }
          });

    Map
      Used for key value storage

      person = %{"name" => "Brooke", "age" => 42}
      myTuple = Map.fetch(person, "name")   {:ok, "Brooke"}
      myName = Map.fetch!(person, "name")
      myName = Map.fetch!(person, "banan") This will lead to exception...

      javascript
        const person = new Map();
        person.set("name", "Brooke")
        person.set("age"", 42)

        let myName = person.get("name")
        let myName = person.get("banana") This will lead to undefined

        Using ordinary object
          {name, age} = {name:"peter", age: "12"}
        or pure empty obj
          var obj = Object.create(null);
          obj.name = "peter";
          obj.age = 12;
          var {name, age} = obj

      Ex
        person = %{ "name" => "Sam", "age" => 31 }
        %{"age" => age}  = person
        IO.puts "Age is #{age}"

      Ex
        person = %{ "name" => "Sam", "age" => 31,
          "bank_info" => %{ "routing" => "001002", "account" => "123123" }
          }
        %{"bank_info" => %{"account" => account}}  = person
        IO.puts "Bank Account is #{account}"

        javscript ->
        {bank_info: {account: a}} = obj

    Case
      {result, error} = File.read(filename)

      case result do
        :ok -> "Content: #{content}"             return value
        :error -> "Error: #{content}"            return value
      end

      not possible in javascript
        case File.read(filename) do
          {:ok, content} -> "Content: #{content}"             return value
          {:error, type} -> "Error: #{content}"            return value
        end

      with guard clauses, not possible in javascript
        case File.read(filename) do
          {:ok, content} -> "Content: #{content}"
            when byte_size(content) > 10 -> "Content: ..."
          {:ok, content} -> "Content: #{content}"
          {:error, type} -> "Error: #{content}"
        end

      ex
        case Account.transfer_amount(from, to, amount) do
          {:ok, value} when value > 1000 -> IO.puts "Amount transferred."
          {:ok, value} -> IO.puts "Transferred: $#{value}"
          {:error, message} -> IO.puts "Error: #{message}"
        end
